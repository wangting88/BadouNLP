# coding:utf8

import torch
import torch.nn as nn
import numpy as np
import math
import random
import os
import re
from transformers import BertModel
from transformers import BertTokenizer
from transformers import BertConfig, BertForMaskedLM
from transformers import BertTokenizer, BertLMHeadModel
"""
基于BERT+MASK的生成文本任务
"""


class LanguageModel(nn.Module):
    def __init__(self, input_dim, vocab):
        super(LanguageModel, self).__init__()
        # self.embedding = nn.Embedding(len(vocab), input_dim)
        # self.layer = nn.LSTM(input_dim, input_dim, num_layers=1, batch_first=True)
        self.bert = BertModel.from_pretrained(r"D:\BaiduNetdiskDownload\AI录播及课件\第六周 语言模型\bert-base-chinese\bert-base-chinese", return_dict=False)
        self.classify = nn.Linear(input_dim, len(vocab)) #线性层作的是词表分类
        self.dropout = nn.Dropout(0.1)
        self.loss = nn.functional.cross_entropy

    #当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, attention_mask=None,y=None):
        # x = self.embedding(x)       #output shape:(batch_size, sen_len, input_dim)
        # x, _ = self.layer(x)        #output shape:(batch_size, sen_len, input_dim)
        if isinstance(x,dict):
            bert_output = self.bert(**x)
        else:
            bert_output = self.bert(input_ids=x, attention_mask = attention_mask if attention_mask is not None
                                    else torch.ones_like(x))
        bert_output = self.dropout(bert_output)
        y_pred = self.classify(bert_output)   #output shape:(batch_size, sen_len, vocab_size)
        if y is not None:
            if attention_mask is not None:
                active_loss = attention_mask.view(-1) == 1
                active_logits = y_pred.view(-1, y_pred.shape[-1])[active_loss]
                active_labels = y.view(-1)[active_loss]
                return self.loss(active_logits,active_labels)
            return self.loss(y_pred.view(-1, y_pred.shape[-1]), y.view(-1))
        else:
            return torch.softmax(y_pred, dim=-1)

#加载字表
def build_bert_vocab(model_name="bert-base-chinese"):
    tokenizer = BertTokenizer.from_pretrained(r"D:\BaiduNetdiskDownload\AI录播及课件\第六周 语言模型\bert-base-chinese\bert-base-chinese")
    return tokenizer.get_vocab()



#加载语料
def load_corpus(path):
    corpus = ""
    with open(path, encoding="gbk") as f:
        for line in f:
            corpus += line.strip()
    return corpus

#随机生成一个样本
#从文本中截取随机窗口，前n个字作为输入，最后一个字作为输出
def build_sample(tokenizer, window_size, corpus):
    start = random.randint(0, len(corpus) - 1 - window_size)
    end = start + window_size
    window = corpus[start:end]
    target = corpus[start + 1:end + 1]  #输入输出错开一位就是训练目标
    # print(window, target)
    # x = [vocab.get(word, vocab["<UNK>"]) for word in window]   #将字转换成序号
    # y = [vocab.get(word, vocab["<UNK>"]) for word in target]
    inputs = tokenizer(window,target,padding='max_length',truncation=True,max_length=window_size,return_tensors='pt')
    return inputs['input_ids'], inputs['attention_mask']

#建立数据集
#sample_length 输入需要的样本数量。需要多少生成多少
#vocab 词表
#window_size 样本长度
#corpus 语料字符串
def build_bert_dataset(sample_length, tokenizer, window_size, corpus):
    input_ids = []
    attention_masks = []
    for _ in range(sample_length):
        start = random.randint(0,len(corpus)-window_size-1)
        text = corpus[start:start+window_size]
        encoded = tokenizer(
            text,
            padding='max_length',
            truncation=True,
            max_length=window_size,
            return_tensors='pt'
        )
        input_ids.append(encoded['input_ids'])
        attention_masks.append(encoded['attention_mask'])
    return {
        'input_ids': torch.cat(input_ids),
        'attention_mask': torch.cat(attention_masks),
    }

#建立模型
def build_bert_model(vocab_size, hidden_dim=768):
    config = BertConfig(vocab_size=vocab_size,
                        hidden_size=hidden_dim,
                        num_hidden_layers=6,
                        num_attention_heads=8,
                        is_decoder = True
                        )
    model = BertLMHeadModel(config)
    return model

#文本生成测试代码
def generate_sentence(prompt, model, tokenizer, max_length,device):
    # reverse_vocab = dict((y, x) for x, y in vocab.items())
    model.eval()
    input_ids = tokenizer.encode(prompt, return_tensors='pt').to(device)
    with torch.no_grad():
        outputs = model.generate(
            input_ids,
            max_length=max_length,
            do_sample=True,
            top_k=30,
            top_p=0.85,
            temperature=1.0,
            repetition_penalty=1.2,
            pad_token_id=tokenizer.eos_token_id
        )
        return tokenizer.decode(outputs[0], skip_special_tokens=True)

def sampling_strategy(prob_distribution,temperature=1.0):  #采样策略
    if random.random() > 0.3:  # 70%贪婪+30%采样
        prob_distribution = prob_distribution / temperature  # 温度调节
        return int(torch.argmax(prob_distribution))
    else:
        prob_distribution = torch.softmax(prob_distribution / temperature, dim=-1)
        return torch.multinomial(prob_distribution, 1).item()

#计算文本ppl
def calc_perplexity(sentence, model, vocab, window_size):
    prob = 0
    model.eval()
    with torch.no_grad():
        for i in range(1, len(sentence)):
            start = max(0, i - window_size)
            window = sentence[start:i]
            x = [vocab.get(char, vocab["<UNK>"]) for char in window]
            x = torch.LongTensor([x])
            target = sentence[i]
            target_index = vocab.get(target, vocab["<UNK>"])
            if torch.cuda.is_available():
                x = x.cuda()
            pred_prob_distribute = model(x)[0][-1]
            target_prob = pred_prob_distribute[target_index]
            prob += math.log(target_prob, 10)
    return 2 ** (prob * ( -1 / len(sentence)))



def train(corpus_path, save_weight=True):
    epoch_num = 20        #训练轮数
    batch_size = 64       #每次训练样本个数
    train_sample = 50000   #每轮训练总共训练的样本总数
    # char_dim = 256        #每个字的维度
    window_size = 128       #样本文本长度
    # vocab = build_vocab("vocab.txt")       #建立字表
    tokenizer = BertTokenizer.from_pretrained(r"D:\BaiduNetdiskDownload\AI录播及课件\第六周 语言模型\bert-base-chinese\bert-base-chinese")
    config = BertConfig.from_pretrained(r"D:\BaiduNetdiskDownload\AI录播及课件\第六周 语言模型\bert-base-chinese\bert-base-chinese")
    config.is_decoder = True
    model =  BertLMHeadModel.from_pretrained(r"D:\BaiduNetdiskDownload\AI录播及课件\第六周 语言模型\bert-base-chinese\bert-base-chinese",config=config)    #建立模型
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    # if torch.cuda.is_available():
    #     model = model.cuda()
    optim = torch.optim.Adam(model.parameters(), lr=0.00001)  #建立优化器
    corpus = load_corpus(corpus_path)  # 加载语料
    print("文本词表模型加载完毕，开始训练")
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for _ in range(int(train_sample / batch_size)):
            inputs = build_bert_dataset(batch_size, tokenizer, window_size, corpus) #构建一组训练样本
            # targets = build_targets(input_ids)
            # if torch.cuda.is_available():
            inputs = {k: v.to(device) for k, v in inputs.items()}  # 字典整体迁移到GPU^^^5^^
            outputs = model(**inputs, labels=inputs["input_ids"])
            optim.zero_grad()    #梯度归零
            loss = outputs[0]   #计算loss
            loss.backward()      #计算梯度
            optim.step()         #更新权重
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        print(generate_sentence("让他在半年之前，就不能做出", model, tokenizer, window_size,device)) #写两段引言测试输出
        print(generate_sentence("李慕站在山路上，深深的呼吸", model, tokenizer, window_size,device))
    if not save_weight:
        return
    else:
        # base_name = os.path.basename(corpus_path).replace("txt", "pth")
        # model_path = os.path.join("model", base_name)
        model.save_pretrained("model/bert_finetuned")
        # torch.save(model.state_dict(), model_path)
        tokenizer.save_pretrained("model/bert_finetuned")
        return



if __name__ == "__main__":
    # build_vocab_from_corpus("corpus/all.txt")
    train("corpus.txt", False)
